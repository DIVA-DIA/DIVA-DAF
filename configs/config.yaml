# @package _global_

# specify here default training configuration
defaults:
    - trainer: default_trainer.yaml
    - task: semantic_segmentation_task.yaml
    - model: unet_model.yaml
    - datamodule: cb55_cropped_datamodule.yaml
    - callbacks: default_callbacks.yaml  # set this to null if you don't want to use callbacks
    - logger: null #wandb.yaml # set logger here or use command line (e.g. `python run.py logger=wandb`)

    - experiment: null
    - hparams_search: null

    # enable color logging
    - override hydra/job_logging: colorlog
    - override hydra/hydra_logging: colorlog


seed: 42
# path to original working directory
# hydra hijacks working directory by changing it to the current log directory,
# so it's useful to have this path as a special variable
# learn more here: https://hydra.cc/docs/next/tutorials/basic/running_your_app/working_directory
work_dir: ${hydra:runtime.cwd}


# use `python run.py debug=true` for easy debugging!
# this will run 1 train, val and test loop with only 1 batch
# equivalent to running `python run.py trainer.fast_dev_run=true`
# (this is placed here just for easier access from command line)
debug: False


# pretty print config at the start of the run using Rich library
print_config: True


# disable python warnings if they annoy you
disable_warnings: True


hydra:
    # output paths for hydra logs
    run:
        dir: logs/runs/${now:%Y-%m-%d}/${now:%H-%M-%S}
    sweep:
        dir: logs/multiruns/${now:%Y-%m-%d_%H-%M-%S}
        subdir: ${hydra.job.num}

    job:
        # you can set here environment variables that are universal for all users
        # for system specific variables (like data paths) it's better to use .env file!
        env_set:
            # currently there are some issues with running sweeps alongside wandb
            # https://github.com/wandb/client/issues/1314
            # this env var fixes that
            WANDB_START_METHOD: thread
